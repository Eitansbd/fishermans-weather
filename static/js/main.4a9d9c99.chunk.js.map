{"version":3,"sources":["Map.js","DatesTab.js","TideChart.js","HourlyTemperatureInfo.js","TemperatureInfo.js","DayInfo.js","WeatherInfo.js","AllConditions.js","App.js","serviceWorker.js","index.js"],"names":["MapContainer","className","google","this","props","zoom","initialCenter","lat","lng","style","width","height","onClick","mapProps","map","clickEvent","mapMarker","title","name","position","React","Component","GoogleApiWrapper","apiKey","DatesTab","APIDate","Date","parse","toLocaleDateString","dates","date","key","activeDate","formatDate","TideChartRow","scope","rowNumber","data","tide_type","tideTime","tideHeight_mt","TideChart","tideData","tide","index","HourlyTemperatureInfo","time","timeInt","parseInt","hour","tempData","src","weatherIconUrl","value","alt","class","timeFormat","tempF","winddir16Point","windspeedMiles","WindGustMiles","swellHeight_ft","visibilityMiles","TemperatureInfo","hourlyData","e","handleTimeChange","hourData","DayInfo","astronomyData","sunrise","sunset","waterTemp","WeatherInfo","dataToShow","weatherData","astronomy","timeOfDay","console","log","hourly","slice","length","waterTemp_F","tides","tide_data","AllConditions","currentData","state","tempUnit","windUnit","bind","find","setState","dateIndex","findIndex","target","innerText","handleDateChange","App","getData","APICall","latLng","fetch","then","res","json","result","weather","isLoaded","error","Map","handleMapClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4a9d9c99.chunk.js","sourcesContent":["import React from 'react';\nimport { Map, GoogleApiWrapper, Marker } from 'google-maps-react';\n\nclass MapContainer extends React.Component {\n  render() {\n    const mapStyles = {\n      width: '400px',\n      height: '300px'\n    };  \n    return(\n      <div className=\"map-container\">\n      <Map \n        google={this.props.google}\n        zoom={8}\n        initialCenter={{ lat: 40.846, lng: -73.7875 }}\n        style={mapStyles}\n        onClick={(mapProps, map, clickEvent) => this.props.onClick(clickEvent)}\n      >\n      {this.props.mapMarker && \n        <Marker\n          title={'The marker`s title will appear as a tooltip.'}\n          name={'SOMA'}\n          position={{lat: this.props.mapMarker.lat, lng: this.props.mapMarker.lng}} />\n      }\n    </Map>\n    </div>\n      \n    );\n  }\n}\n\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyAoGvJeAlvfIulWTeZyePXSIYBG1ZUBC_0\"\n})(MapContainer);","import React from 'react';\n\nclass DatesTab extends React.Component {\n  formatDate(APIDate){\n    const date = new Date(Date.parse(APIDate));\n    return (date.toLocaleDateString());\n  }\n  render() {\n    return(\n      <ul className=\"nav nav-tabs nav-fill\">\n        {this.props.dates.map(date => {\n          return(<li \n            key={date}\n            className=\"nav-item\"\n            onClick={() => this.props.onClick(date)}\n            >\n              <a className={\"nav-link \" + (this.props.activeDate === date ? \"active\" : \"\")}>\n                {this.formatDate(date)}\n              </a>\n            </li>);\n        })}\n      </ul>\n    );\n  }\n}\n\nexport default DatesTab;","import React from 'react';\n\nfunction TideChartRow(props) {\n  return (\n    <tr>\n      <th scope=\"row\">{props.rowNumber}</th>\n      <td>{props.data.tide_type}</td>\n      <td>{props.data.tideTime}</td>\n      <td>{props.data.tideHeight_mt}</td>\n    </tr>\n  )\n}\n\nclass TideChart extends React.Component {\n  render() {\n    const tideData = this.props.tideData;\n    return(\n      <div>\n        <table className=\"table table-striped\">\n          <thead>\n            <tr>\n              <th scope=\"col\"></th>\n              <th scope=\"col\">Type</th>\n              <th scope=\"col\">Time</th>\n              <th scope=\"col\">Height</th>\n            </tr>\n          </thead>\n          <tbody>\n            {tideData.map((tide, index) => {\n            return(<TideChartRow data={tide} rowNumber={index + 1}/>);\n            })}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default TideChart;","import React from 'react';\n\nclass HourlyTemperatureInfo extends React.Component{\n  timeFormat(time){\n  \n  const timeInt = parseInt(time) / 100;\n  let hour = timeInt % 12;\n  if (hour === 0) {\n    hour = 12;\n  }\n  let dayOrNight;\n  if ((timeInt / 12) < 1) {\n    dayOrNight = \"AM\";\n  } else {\n    dayOrNight = \"PM\";\n  }\n  \n  return (hour + \":00 \" + dayOrNight);\n}\n  \n  render() {\n    const tempData = this.props.tempData;\n    return(\n      <li className=\"media hourly-weather\">\n        <img src={tempData.weatherIconUrl[0].value} className=\"mr-3 align-self-center\" alt=\"weather-icon\" />\n        <div class=\"media-body\">\n          <h5 className=\"mt-0 mb-1\">{this.timeFormat(tempData.time)}</h5>\n          <p className=\"hourly-weather-description\">{tempData.tempF} Â°F, winds {tempData.winddir16Point} at {tempData.windspeedMiles} MPH with gusts up to {tempData.\n          WindGustMiles} MPH</p>\n          <p className=\"hourly-weather-description\">Waves around {tempData.swellHeight_ft} feet, visiblity {tempData.visibilityMiles} Miles</p>\n        </div>\n      </li>\n    );\n  }\n}\n\nexport default HourlyTemperatureInfo;\n","import React from 'react';\nimport HourlyTemperatureInfo from './HourlyTemperatureInfo.js';\n\n\nclass TemperatureInfo extends React.Component {\n  \n  render() {\n    const hourlyData = this.props.hourlyData;\n    \n    \n    return(\n      <div>\n      <div className=\"btn-group\">\n        <button className=\"btn btn-primary\" onClick={(e) => this.props.handleTimeChange(e)}>&#x3C;</button>\n        <button className=\"btn btn-primary\" onClick={(e) => this.props.handleTimeChange(e)}>&#x3E;</button>\n      </div>\n      <ul className=\"list-unstyled\">\n        {hourlyData.map(hourData => {\n          return (\n            <HourlyTemperatureInfo \n              key={hourData.time}tempData={hourData} />\n          );\n        })}\n      </ul>\n      </div>\n    );\n  }\n}\n\nexport default TemperatureInfo","import React from 'react';\n\nclass DayInfo extends React.Component {\n  render() {\n    const astronomyData = this.props.astronomyData;\n    return(\n      <div>\n        <p>sunrise: {astronomyData.sunrise}, sunset: {astronomyData.sunset}</p>  \n        <p>water temp: {this.props.waterTemp}</p>\n      </div>\n    );\n  }\n}\n\nexport default DayInfo;","import React from 'react';\nimport TideChart from './TideChart.js';\nimport TemperatureInfo from './TemperatureInfo';\nimport DayInfo from './DayInfo';\n\nclass WeatherInfo extends React.Component {\n  render() {\n    const data = this.props.dataToShow.weatherData;\n    const astronomyData = data.astronomy[0];\n    let hourlyData;\n    const timeOfDay = this.props.dataToShow.timeOfDay;\n    console.log(data);\n    if (timeOfDay === \"AM\") {\n      hourlyData = data.hourly.slice(0, data.hourly.length / 2);\n    } else if (timeOfDay === \"PM\"){\n      hourlyData = data.hourly.slice(data.hourly.length / 2);\n    }\n    \n    return(\n      <div className=\"col-12\">\n        <div className=\"row\">\n          <div className=\"col\">\n            <TemperatureInfo hourlyData={hourlyData} \n                             timeOfDay={timeOfDay}\n                             handleTimeChange={this.props.handleTimeChange}/>\n          </div>\n          <div className=\"col\">\n            <div className=\"row\">\n              <div className=\"col\">\n                <DayInfo astronomyData={astronomyData} waterTemp={hourlyData[0].waterTemp_F}/>\n              </div>\n            </div>\n            <div className=\"row\">\n              <div className=\"col-md-6\">\n                <TideChart tideData={data.tides[0].tide_data} />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default WeatherInfo;","import React from 'react';\nimport DatesTab from './DatesTab.js';\nimport WeatherInfo from './WeatherInfo';\n\nclass AllConditions extends React.Component {\n  constructor(props) {\n    super(props);\n    \n    const data = props.weatherData;\n    const date = data[0].date;\n    const currentData = data[0];\n    \n    this.state = {\n      data: data,\n      dataToShow: {\n        date: date,\n        timeOfDay: \"AM\",\n        weatherData: currentData, \n      },\n      \n      tempUnit: \"F\",\n      windUnit: \"MPH\",\n      mapMarker: null,\n    };\n    \n    this.handleTimeChange = this.handleTimeChange.bind(this);\n  }\n  \n  handleDateChange(date){\n    const weatherData = this.state.data.find(weatherData => {\n      return (weatherData.date === date);\n    });\n    \n    this.setState({\n      dataToShow: {\n        date: date,\n        timeOfDay: \"AM\",\n        weatherData: weatherData,\n      }\n    });\n  }\n  \n  handleTimeChange(e) {\n    let dateIndex = this.state.data.findIndex(data => data.date === this.state.dataToShow.date);\n    \n    let timeOfDay;\n    if (this.state.dataToShow.timeOfDay === \"AM\") {\n      timeOfDay = \"PM\";\n      if (e.target.innerText === \"<\") {\n        dateIndex--;\n      }\n    } else if (this.state.dataToShow.timeOfDay === \"PM\") {\n      timeOfDay = \"AM\";\n      if (e.target.innerText === \">\") {\n        dateIndex++;\n      }\n    }\n\n    const weatherData = this.state.data[dateIndex];\n    \n    if (weatherData) {\n      const date = this.state.data[dateIndex].date;\n      \n      this.setState({\n        dataToShow: {\n          date: date,\n          timeOfDay: timeOfDay,\n          weatherData: weatherData,\n        }\n      });\n    }\n  }\n  \n  render() {\n    const dates = this.state.data.map(data => data.date);\n    \n    return(\n      <div>\n        <div className=\"row day-button-container\">\n          <DatesTab\n            dates={dates}\n            activeDate={this.state.dataToShow.date}\n            onClick={this.handleDateChange.bind(this)}/>\n        </div>\n        <div className=\"row\">\n          <WeatherInfo \n            handleTimeChange={this.handleTimeChange}\n            dataToShow={this.state.dataToShow}/>  \n        </div>  \n      </div>\n    );\n  }\n}\n\nexport default AllConditions;","import React from 'react';\nimport './App.css';\nimport SampleData from './sample_api_data.json';\nimport MapContainer from './Map.js';\nimport AllConditions from './AllConditions';\n\nclass MarineInfo extends React.Component {\n  \n  render() {\n    return(\n      <div>\n      \n      </div>\n    );\n  }\n}\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    \n    this.state = {\n      mapMarker: null,\n    };\n    \n    this.getData = this.APICall.bind(this);\n  }\n  \n  handleMapClick(clickEvent){\n    console.log(\"here\")\n    const latLng = clickEvent.latLng;\n    const lat = latLng.lat();\n    const lng = latLng.lng();\n    this.setState({\n      mapMarker: {\n        lat: lat,\n        lng: lng,\n      }\n    });\n    \n    this.APICall(lat, lng);\n  }\n  \n  APICall(lat, lng) {\n    fetch(`https://api.worldweatheronline.com/premium/v1/marine.ashx?q=${lat},${lng}&key=95a5d8be77864b6e957144653193012&format=json&tp=1&tide=yes`)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          const weatherData = result.data.weather;\n          this.setState({\n            isLoaded: true, \n            data: weatherData,\n          });\n        },\n        (error) => {\n          this.setState({\n            isLoaded: true, \n            error\n          });\n        }\n      );\n  }\n  \n  \n  \n  render() {\n    \n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <h1>Fishing Data</h1>\n        </div>\n        <div className=\"row map-container\" >\n          <MapContainer mapMarker={this.state.mapMarker} onClick={this.handleMapClick.bind(this)} />\n        </div>\n        {this.state.data &&\n          <div>\n            <AllConditions weatherData={this.state.data}\n                           key={this.state.mapMarker.lat + this.state.mapMarker.lng}/>\n          </div>}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}