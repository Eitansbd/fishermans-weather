{"version":3,"sources":["Map.js","DatesTab.js","TideChart.js","HourlyTemperatureInfo.js","TemperatureInfo.js","DayInfo.js","WeatherInfo.js","AllConditions.js","App.js","serviceWorker.js","index.js"],"names":["MapContainer","className","google","this","props","zoom","initialCenter","lat","lng","style","width","height","onClick","mapProps","map","clickEvent","mapMarker","title","name","position","React","Component","GoogleApiWrapper","apiKey","DatesTab","APIDate","Date","parse","toLocaleDateString","dates","date","key","activeDate","formatDate","TideChartRow","scope","rowNumber","data","tide_type","tideTime","tideHeight_mt","TideChart","tideData","tide","index","HourlyTemperatureInfo","time","timeInt","parseInt","hour","tempData","src","weatherIconUrl","value","alt","class","timeFormat","weatherDesc","tempF","winddir16Point","windspeedMiles","WindGustMiles","swellHeight_ft","visibilityMiles","TemperatureInfo","hourlyData","hoursPerPage","onChange","e","handleHoursPerPageChange","hourData","handleTimeChange","DayInfo","astronomyData","sunrise","sunset","waterTemp","WeatherInfo","waterTemp_F","AllConditions","weatherData","currentHour","getHours","timeOfDay","Math","ceil","state","dataToShow","hours","tempUnit","windUnit","bind","setState","target","dateIndex","findIndex","numOfIntervals","innerText","length","find","startingHour","hourly","slice","handleDateChange","astronomy","tides","tide_data","App","showMap","latLng","fetchWeatherData","fetchLocation","fetch","then","res","json","result","address","results","formatted_address","error","LocationIsLoaded","weather","dataIsLoaded","isLoaded","Map","handleMapClick","revealMap","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c9b37a8b.chunk.js","sourcesContent":["import React from 'react';\nimport { Map, GoogleApiWrapper, Marker } from 'google-maps-react';\n\nclass MapContainer extends React.Component {\n  render() {\n    const mapStyles = {\n      width: '100%',\n      height: '400px',\n      \n    };  \n    return(\n      <div className=\"map-container\">\n      <Map \n        google={this.props.google}\n        zoom={8}\n        initialCenter={{ lat: 40.846, lng: -73.7875 }}\n        style={mapStyles}\n        onClick={(mapProps, map, clickEvent) => this.props.onClick(clickEvent)}\n      >\n      {this.props.mapMarker && \n        <Marker\n          title={'The marker`s title will appear as a tooltip.'}\n          name={'SOMA'}\n          position={{lat: this.props.mapMarker.lat, lng: this.props.mapMarker.lng}} />\n      }\n    </Map>\n    </div>\n      \n    );\n  }\n}\n\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyAoGvJeAlvfIulWTeZyePXSIYBG1ZUBC_0\"\n})(MapContainer);","import React from 'react';\n\nclass DatesTab extends React.Component {\n  formatDate(APIDate){\n    const date = new Date(Date.parse(APIDate + 'T00:00:00'));\n    return (date.toLocaleDateString());\n  }\n  render() {\n    return(\n      <ul className=\"nav nav-tabs nav-fill\">\n        {this.props.dates.map(date => {\n          return(<li \n            key={date}\n            className=\"nav-item\"\n            onClick={() => this.props.onClick(date)}\n            >\n              <a className={\"nav-link \" + (this.props.activeDate === date ? \"active\" : \"\")}>\n                {this.formatDate(date)}\n              </a>\n            </li>);\n        })}\n      </ul>\n    );\n  }\n}\n\nexport default DatesTab;","import React from 'react';\n\nfunction TideChartRow(props) {\n  return (\n    <tr>\n      <th scope=\"row\">{props.rowNumber}</th>\n      <td>{props.data.tide_type}</td>\n      <td>{props.data.tideTime}</td>\n      <td>{props.data.tideHeight_mt}</td>\n    </tr>\n  )\n}\n\nclass TideChart extends React.Component {\n  render() {\n    const tideData = this.props.tideData;\n    return(\n      <div>\n        <table className=\"table table-striped\">\n          <thead>\n            <tr>\n              <th scope=\"col\"></th>\n              <th scope=\"col\">Type</th>\n              <th scope=\"col\">Time</th>\n              <th scope=\"col\">Height</th>\n            </tr>\n          </thead>\n          <tbody>\n            {tideData.map((tide, index) => {\n            return(<TideChartRow data={tide} rowNumber={index + 1}/>);\n            })}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default TideChart;","import React from 'react';\n\nclass HourlyTemperatureInfo extends React.Component{\n  timeFormat(time){\n  \n  const timeInt = parseInt(time) / 100;\n  let hour = timeInt % 12;\n  if (hour === 0) {\n    hour = 12;\n  }\n  let dayOrNight;\n  if ((timeInt / 12) < 1) {\n    dayOrNight = \"AM\";\n  } else {\n    dayOrNight = \"PM\";\n  }\n  \n  return (hour + \":00 \" + dayOrNight);\n}\n  \n  render() {\n    const tempData = this.props.tempData;\n    return(\n      <li className=\"media hourly-weather\">\n        <img src={tempData.weatherIconUrl[0].value} className=\"mr-3 align-self-center rounded\" alt=\"weather-icon\" />\n        <div class=\"media-body\">\n          <h5 className=\"mt-0 mb-1\">\n            {this.timeFormat(tempData.time)} - <small>{tempData.weatherDesc[0].value}</small>\n          </h5>\n          <p className=\"hourly-weather-description\">{tempData.tempF} °F, winds {tempData.winddir16Point} at {tempData.windspeedMiles} MPH with gusts up to {tempData.\n          WindGustMiles} MPH</p>\n          <p className=\"hourly-weather-description\">Waves around {tempData.swellHeight_ft} feet, visiblity {tempData.visibilityMiles} Miles</p>\n        </div>\n      </li>\n    );\n  }\n}\n\nexport default HourlyTemperatureInfo;\n","import React from 'react';\nimport HourlyTemperatureInfo from './HourlyTemperatureInfo.js';\n\n\nclass TemperatureInfo extends React.Component {\n  \n  render() {\n    const hourlyData = this.props.hourlyData;\n    \n    \n    return(\n      <div>\n        <div className=\"hours-per-page\">\n          <div className=\"form-inline float-right\">\n          <div className=\"float-right form-group\">\n            <label className=\"control-label\">Hours per page: \n              <select value={this.props.hoursPerPage} \n                      onChange={(e) => this.props.handleHoursPerPageChange(e)}\n                      className=\"form-control hours-selection\">\n                <option value=\"2\">2</option>\n                <option value=\"4\">4</option>\n                <option value=\"6\">6</option>\n                <option value=\"8\">8</option>\n                <option value=\"12\">12</option>\n              </select>\n            </label>\n          </div>\n          </div>\n        </div>\n        <ul className=\"list-unstyled hourly-data\">\n          {hourlyData.map(hourData => {\n            return (\n              <HourlyTemperatureInfo \n                key={hourData.time}tempData={hourData} />\n            );\n          })}\n        </ul>\n        <div>\n            <button className=\"btn btn-default float-left\" onClick={(e) => this.props.handleTimeChange(e)}>Previous</button>\n            <button className=\"btn btn-default float-right\" onClick={(e) => this.props.handleTimeChange(e)}>Next</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default TemperatureInfo","import React from 'react';\n\nclass DayInfo extends React.Component {\n  render() {\n    const astronomyData = this.props.astronomyData;\n    return(\n      <div>\n        <p>\n        sunrise: {astronomyData.sunrise}, sunset: {astronomyData.sunset}, water temp: {this.props.waterTemp}</p>\n      </div>\n    );\n  }\n}\n\nexport default DayInfo;","import React from 'react';\nimport TideChart from './TideChart.js';\nimport TemperatureInfo from './TemperatureInfo';\nimport DayInfo from './DayInfo';\n\nclass WeatherInfo extends React.Component {\n  render() {\n    return(\n      <div className=\"col-12\">\n        <div className=\"row\">\n          <div className=\"col-md-6 temperature-container\">\n            <TemperatureInfo hourlyData={this.props.hourlyData}\n                             hoursPerPage={this.props.hoursPerPage}\n                             handleTimeChange={this.props.handleTimeChange}\n                             handleHoursPerPageChange={this.props.handleHoursPerPageChange}/>\n          </div>\n          <div className=\"col offset-md-1\">\n            <div className=\"row border-fill\">\n              <div className=\"col\">\n                <DayInfo astronomyData={this.props.astronomyData} waterTemp={this.props.hourlyData[0].waterTemp_F}/>\n              </div>\n            </div>\n            <div className=\"row border-fill tide-data-container\">\n              <div className=\"col\">\n                <TideChart tideData={this.props.tideData} />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default WeatherInfo;","import React from 'react';\nimport DatesTab from './DatesTab.js';\nimport WeatherInfo from './WeatherInfo';\n\nclass AllConditions extends React.Component {\n  constructor(props) {\n    super(props);\n    \n    const data = props.weatherData;\n    const date = data[0].date;\n    \n    const today = new Date();\n    const currentHour = today.getHours();\n    const hoursToShow = 8;\n    const timeOfDay = Math.ceil((currentHour + 1) / hoursToShow);\n    \n    this.state = {\n      data: data,\n      dataToShow: {\n        hours: hoursToShow,\n        date: date,\n        timeOfDay: timeOfDay,\n      },\n      \n      tempUnit: \"F\",\n      windUnit: \"MPH\",\n      mapMarker: null,\n    };\n    \n    this.handleTimeChange = this.handleTimeChange.bind(this);\n    this.handleHoursPerPageChange = this.handleHoursPerPageChange.bind(this);\n  }\n  \n  handleDateChange(date){\n    this.setState(state => ({\n      dataToShow: {\n        hours: state.dataToShow.hours,\n        date: date,\n        timeOfDay: state.dataToShow.timeOfDay,\n      }\n    }));\n  }\n  \n  handleHoursPerPageChange(e) {\n    const hours = parseInt(e.target.value);\n    this.setState(state => ({\n      dataToShow: {\n        hours: hours,\n        date: state.dataToShow.date,\n        timeOfDay: state.dataToShow.timeOfDay,\n      }\n    }));\n  }\n  \n  handleTimeChange(e) {\n    let dateIndex = this.state.data.findIndex(data => data.date === this.state.dataToShow.date);\n    let timeOfDay = this.state.dataToShow.timeOfDay;\n    const numOfIntervals = 24 / this.state.dataToShow.hours;\n    \n    if (e.target.innerText === \"Previous\") {\n      if (timeOfDay !== 1) {\n        timeOfDay--;\n      } else if (timeOfDay === 1) {\n        timeOfDay = numOfIntervals;\n        dateIndex--;\n      }\n    } else if (e.target.innerText === \"Next\") {\n      if (timeOfDay !== numOfIntervals) {\n        timeOfDay++;\n      } else if (timeOfDay === numOfIntervals) {\n        timeOfDay = 1;\n        dateIndex++;\n      }\n    }\n    \n    if (dateIndex >= 0 && dateIndex < this.state.data.length) {\n      const date = this.state.data[dateIndex].date;\n      \n      this.setState({\n        dataToShow: {\n          hours: this.state.dataToShow.hours,\n          date: date,\n          timeOfDay: timeOfDay,\n        }\n      });\n    }\n  }\n  \n  render() {\n    const dates = this.state.data.map(data => data.date);\n    const weatherData = this.state.data.find(weatherData => {\n      return (weatherData.date === this.state.dataToShow.date);\n    });\n    \n    const hoursPerPage = this.state.dataToShow.hours;\n    const startingHour = (this.state.dataToShow.timeOfDay - 1) * hoursPerPage;\n    const hourlyData = weatherData.hourly.slice(startingHour, (startingHour + hoursPerPage));\n    \n    return(\n      <div>\n        <div className=\"row day-button-container\">\n          <DatesTab\n            dates={dates}\n            activeDate={this.state.dataToShow.date}\n            onClick={this.handleDateChange.bind(this)}/>\n        </div>\n        <div className=\"row\">\n          <WeatherInfo\n            astronomyData={weatherData.astronomy[0]}\n            tideData={weatherData.tides[0].tide_data}\n            hoursPerPage={hoursPerPage}\n            hourlyData={hourlyData}\n            handleTimeChange={this.handleTimeChange}\n            handleHoursPerPageChange={this.handleHoursPerPageChange}/>  \n        </div>  \n      </div>\n    );\n  }\n}\n\nexport default AllConditions;","import React from 'react';\nimport './App.css';\nimport SampleData from './sample_api_data.json';\nimport MapContainer from './Map.js';\nimport AllConditions from './AllConditions';\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    \n    this.state = {\n      showMap: true,\n      mapMarker: null,\n    };\n  }\n  \n  handleMapClick(clickEvent){\n    const latLng = clickEvent.latLng;\n    const lat = latLng.lat();\n    const lng = latLng.lng();\n    this.setState({\n      mapMarker: {\n        lat: lat,\n        lng: lng,\n      }\n    });\n    \n    this.fetchWeatherData(lat, lng);\n    this.fetchLocation(lat, lng);\n  }\n  \n  fetchLocation(lat, lng) {\n    const mapApiKey = \"AIzaSyAoGvJeAlvfIulWTeZyePXSIYBG1ZUBC_0\";\n    fetch(`https://maps.googleapis.com/maps/api/geocode/json?latlng=${lat},${lng}&key=${mapApiKey}`)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            address: result.results[0].formatted_address\n          });\n        },\n        (error) => {\n          this.setState({\n            LocationIsLoaded: false,\n            error\n          });\n        }\n      );\n  }\n  \n  fetchWeatherData(lat, lng) {\n    fetch(`https://api.worldweatheronline.com/premium/v1/marine.ashx?q=${lat},${lng}&key=95a5d8be77864b6e957144653193012&format=json&tp=1&tide=yes`)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          const weatherData = result.data.weather;\n          this.setState({\n            showMap: false,\n            dataIsLoaded: true, \n            data: weatherData,\n          });\n        },\n        (error) => {\n          this.setState({\n            isLoaded: true, \n            error\n          });\n        }\n      );\n  }\n  \n  revealMap() {\n    this.setState({\n      showMap: !this.state.showMap\n    });\n  }\n  \n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-12\">\n            <h2 className=\"text-center\">\n              The Fishing Forecast\n            </h2>\n          </div>\n        </div>\n          {this.state.showMap &&\n            <div className=\"row map-container\" >\n              <MapContainer mapMarker={this.state.mapMarker} \n                            onClick={this.handleMapClick.bind(this)} />\n            </div>\n          }\n          {this.state.dataIsLoaded? (\n            <div className=\"location-container\">\n              <p class=\"text-muted text-center\">\n                Showing results for: {this.state.address}\n                <button className=\"btn btn-sm btn-primary\" onClick={this.revealMap.bind(this)}>\n                  {this.state.showMap ? \"Hide\" : \"Show\"} map\n                </button>\n              </p>\n            </div>\n          ) : (\n            <div className=\"location-container\">\n              <p class=\"text-muted text-center\">\n                Click a location on the map for the latest marine and weather information.\n              </p>\n            </div>\n          )\n          }\n          {this.state.data &&\n            <div className=\"all-conditions-container\">\n              <AllConditions weatherData={this.state.data}\n                             key={this.state.mapMarker.lat + this.state.mapMarker.lng}/>\n          </div>          }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}